diff --git a/doc/manual/overview.xml b/doc/manual/overview.xml
index 133c2cb..332f477 100644
--- a/doc/manual/overview.xml
+++ b/doc/manual/overview.xml
@@ -1506,6 +1506,45 @@ xlink:href="https://github.com/elitak/nixos-infect">nixos-infect</link>
 . <literal>nixos-infect</literal> itself uses the undocumented
 <literal>NIXOS_LUSTRATE</literal> under the hood.
 </para>
+</section>
+<section xml:id="sec-deploying-to-vultr"><title>Deploying to Vultr</title>
+
+<para><xref linkend="ex-trivial-vultr.nix" /> shows how to run
+a vultr instance. We only support instance creation and
+destruction at the moment.
+</para>
+
+<para>Note that an image needs created in vultr using an iso with your default ssh
+  key for deployment. Follow these
+<link xlink:href="https://www.vultr.com/docs/install-nixos-on-vultr">directions</link>
+to setup an image using nixos. Make sure to assign a public <literal>ssh-key</literal>
+to root in configuration.nix and allow root login with key. This key is only used
+for initial connection and a new key stored in the nixops state will be used for future connections. After booting the instance, create a snapshot in the vultr UI.
+</para>
+
+<example xml:id="ex-trivial-vultr.nix">
+  <title><filename>trivial-vultr.nix</filename>: A trivial vultr setup</title>
+<programlisting>
+{
+  machine = { config, pkgs, ... }: {
+    services.nginx.enable = true;
+    services.openssh.enable = true;
+
+    deployment.targetEnv = "vultr";
+    deployment.vultr.snapshotid = "xxxxxxxxxxxxx";
+    deployment.vultr.dcid = "1";
+    deployment.vultr.vpsplanid = "201";
+    deployment.vultr.label = "dev01.mydomain.com";
+  };
+}
+</programlisting>
+</example>
+
+<para>The snapshotid can be retrieved from the UI or API for the snapshot
+created in the first step. A list of vps plan id's can be retrieved from the
+API call <literal>/v1/plans/list</literal> and the list of dc id's can be
+retrieved from the API call <literal>/v1/regions/list</literal>.</para>
+
 </section>
 
 <section><title>Deploying to Libvirtd (Qemu)</title>
diff --git a/examples/trivial-vultr.nix b/examples/trivial-vultr.nix
new file mode 100644
index 0000000..8a5fde8
--- /dev/null
+++ b/examples/trivial-vultr.nix
@@ -0,0 +1,12 @@
+{
+  machine = { config, pkgs, ... }: {
+    services.nginx.enable = true;
+    services.openssh.enable = true;
+
+    deployment.targetEnv = "vultr";
+    deployment.vultr.snapshotid = "xxxxxxxxxxxxx";
+    deployment.vultr.dcid = "1";
+    deployment.vultr.vpsplanid = "201";
+    deployment.vultr.label = "dev01.mydomain.com";
+  };
+}
diff --git a/nix/eval-machine-info.nix b/nix/eval-machine-info.nix
index 2884b4b..dc0ad6b 100644
--- a/nix/eval-machine-info.nix
+++ b/nix/eval-machine-info.nix
@@ -311,6 +311,7 @@ rec {
           hetzner = optionalAttrs (v.config.deployment.targetEnv == "hetzner") v.config.deployment.hetzner;
           container = optionalAttrs (v.config.deployment.targetEnv == "container") v.config.deployment.container;
           route53 = v.config.deployment.route53;
+          vultr = optionalAttrs (v.config.deployment.targetEnv == "vultr") v.config.deployment.vultr;
           virtualbox =
             let cfg = v.config.deployment.virtualbox; in
             optionalAttrs (v.config.deployment.targetEnv == "virtualbox") (cfg
diff --git a/nix/options.nix b/nix/options.nix
index 0866c3a..14a3e8b 100644
--- a/nix/options.nix
+++ b/nix/options.nix
@@ -24,6 +24,7 @@ in
       ./hetzner.nix
       ./container.nix
       ./libvirtd.nix
+      ./vultr.nix
     ];
 
 
diff --git a/nix/vultr.nix b/nix/vultr.nix
new file mode 100644
index 0000000..133227f
--- /dev/null
+++ b/nix/vultr.nix
@@ -0,0 +1,54 @@
+{ config, pkgs, lib, utils, ... }:
+
+with utils;
+with lib;
+with import ./lib.nix lib;
+
+let
+  cfg = config.deployment.vultr;
+in
+{
+  ###### interface
+  options = {
+
+    deployment.vultr.label = mkOption {
+      default = "";
+      example = "myserver.example.com";
+      type = types.str;
+      description = ''
+        The name of the server.
+      '';
+    };
+
+    deployment.vultr.dcid = mkOption {
+      default = "";
+      example = "1";
+      type = types.str;
+      description = ''
+        The region. See region_list API for list of regions available
+      '';
+    };
+
+    deployment.vultr.vpsplanid = mkOption {
+      example = "201";
+      type = types.str;
+      description = ''
+        The VPSPLANID. Make sure the region you chose supports the plan ID.
+        This determines the resources and cost of the instance.
+      '';
+    };
+    deployment.vultr.snapshotid = mkOption {
+      example = "9e758d1a379eb";
+      type = types.str;
+      description = ''
+        The snapshotid. This needs created following this tutorial:
+        https://www.vultr.com/docs/install-nixos-on-vultr
+      '';
+    };
+  };
+
+  config = mkIf (config.deployment.targetEnv == "vultr") {
+    nixpkgs.system = mkOverride 900 "x86_64-linux";
+    services.openssh.enable = true;
+  };
+}
diff --git a/nixops/backends/vultr_vm.py b/nixops/backends/vultr_vm.py
new file mode 100644
index 0000000..8890368
--- /dev/null
+++ b/nixops/backends/vultr_vm.py
@@ -0,0 +1,163 @@
+# -*- coding: utf-8 -*-
+"""
+A backend for Vultr.
+
+Vultr doesn't have an official nixos image. To use this backend you must
+follow the instructions here to generate a snapshot:
+    https://www.vultr.com/docs/install-nixos-on-vultr
+
+Still to do:
+* Use nixos OS type when Vultr adds one.
+"""
+import os
+import os.path
+import time
+import nixops.resources
+from nixops.backends import MachineDefinition, MachineState
+from nixops.nix_expr import Function, RawValue
+import nixops.util
+import nixops.known_hosts
+import socket
+from vultr import Vultr, VultrError
+from json import dumps
+
+class VultrDefinition(MachineDefinition):
+    @classmethod
+    def get_type(cls):
+        return "vultr"
+
+    def __init__(self, xml, config):
+        MachineDefinition.__init__(self, xml, config)
+        self.dcid = config["vultr"]["dcid"]
+        self.vpsplanid = config["vultr"]["vpsplanid"]
+        self.snapshotid = config["vultr"]["snapshotid"]
+        self.label = config["vultr"]["label"]
+        # TODO: only use 164 if snapshotid is set.
+        self.osid = 164
+
+    def show_type(self):
+        return "{0} [{1}]".format(self.get_type(), self.dcid)
+
+
+class VultrState(MachineState):
+    @classmethod
+    def get_type(cls):
+        return "vultr"
+
+    state = nixops.util.attr_property("state", MachineState.MISSING, int)  # override
+    apikey = nixops.util.attr_property("vultr.apikey", None)
+    public_ipv4 = nixops.util.attr_property("publicIpv4", None)
+    default_gateway = nixops.util.attr_property("defaultGateway", None)
+    netmask = nixops.util.attr_property("netmask", None)
+    subid = nixops.util.attr_property("vultr.subid", None)
+    label = nixops.util.attr_property("vultr.label", None)
+    _ssh_private_key = nixops.util.attr_property("vultr.sshPrivateKey", None)
+    _ssh_public_key = nixops.util.attr_property("vultr.sshPublicKey", None)
+    _ssh_public_key_deployed = nixops.util.attr_property("vultr.sshPublicKeyDeployed", False, bool)
+    # TODO: only use 164 if snapshotid is set.
+    osid = 164
+
+    def __init__(self, depl, name, id):
+        MachineState.__init__(self, depl, name, id)
+        self.name = name
+
+    def get_ssh_name(self):
+        return self.public_ipv4
+
+    def get_ssh_flags(self, *args, **kwargs):
+        super_state_flags = super(VultrState, self).get_ssh_flags(*args, **kwargs)
+        if self.subid and self._ssh_public_key_deployed:
+            return super_state_flags + [
+                '-o', 'UserKnownHostsFile=/dev/null',
+                '-o', 'StrictHostKeyChecking=no',
+                '-i', self.get_ssh_private_key_file(),
+            ]
+        return super_state_flags
+
+    def get_physical_spec(self):
+        return Function("{ ... }", {
+            'imports': [ RawValue('<nixpkgs/nixos/modules/profiles/qemu-guest.nix>') ],
+            ('config', 'boot', 'initrd', 'availableKernelModules'): [ "ata_piix", "uhci_hcd", "virtio_pci", "sr_mod", "virtio_blk" ],
+            ('config', 'boot', 'loader', 'grub', 'device'): '/dev/vda',
+            ('config', 'fileSystems', '/'): { 'device': '/dev/vda1', 'fsType': 'ext4'},
+            ('config', 'users', 'extraUsers', 'doug', 'openssh', 'authorizedKeys', 'keys'): [self._ssh_public_key]
+        })
+
+    def get_ssh_private_key_file(self):
+        if self._ssh_private_key_file:
+            return self._ssh_private_key_file
+        else:
+            return self.write_ssh_private_key(self._ssh_private_key)
+
+    def create_after(self, resources, defn):
+        # make sure the ssh key exists before we do anything else
+        return {
+            r for r in resources if
+            isinstance(r, nixops.resources.ssh_keypair.SSHKeyPairState)
+        }
+
+    def get_api_key(self):
+        apikey = os.environ.get('VULTR_API_KEY', self.apikey)
+        if apikey == None:
+            raise Exception("VULTR_API_KEY must be set in the environment to deploy instances")
+        return apikey
+
+
+    def destroy(self, wipe=False):
+        self.log("destroying instance {}".format(self.subid))
+        vultr = Vultr(self.get_api_key())
+        try:
+            vultr.server_destroy(self.subid)
+        except VultrError:
+            self.log("An error occurred destroying instance. Assuming it's been destroyed already.")
+        self.public_ipv4 = None
+        self.subid = None
+
+    def create(self, defn, check, allow_reboot, allow_recreate):
+        self.set_common_state(defn)
+
+        if self.subid is not None:
+            return
+
+        self.log_start("creating instance ...")
+        self.log("dcid: " + str(defn.dcid))
+        self.log("osid: " + str(defn.osid))
+        self.log("vpsplanid: " + str(defn.vpsplanid))
+        self.log("snapshotid: " + str(defn.snapshotid))
+        self.log("label: " + str(defn.label))
+        vultr = Vultr(self.get_api_key())
+        snapshots = vultr.snapshot_list()
+        if defn.snapshotid not in snapshots:
+            raise Exception("Unexpected Error: snapshot {} does not exist".format(defn.snapshotid))
+        server_create_output = vultr.server_create(dcid=defn.dcid, osid=defn.osid, vpsplanid=defn.vpsplanid, snapshotid=defn.snapshotid, enable_ipv6='yes', enable_private_network='yes', label=defn.label)
+        subid = server_create_output['SUBID']
+        self.log("instance id: " + subid)
+        server_info = vultr.server_list()[subid]
+        while server_info['status'] == 'pending' or server_info['server_state'] != 'ok':
+            server_info = vultr.server_list()[subid]
+            time.sleep(1)
+            self.log_continue("[status: {} state: {}] ".format(server_info['status'], server_info['server_state']))
+            if server_info['status'] == 'active' and server_info['server_state'] == 'ok':
+                # vultr sets ok before locked when restoring snapshot. Need to make sure we're really ready.
+                time.sleep(10)
+                server_info = vultr.server_list()[subid]
+        if server_info['status'] != 'active' or server_info['server_state'] != 'ok':
+            raise Exception("unexpected status: {}/{}".format(server_info['status'],server_info['server_state']))
+        self.subid = subid
+        self.label = server_info['label']
+        self.log_start("generating new SSH keypair... ")
+        key_name = "NixOps client key for {0}".format(self.subid)
+        self._ssh_private_key, self._ssh_public_key = \
+            nixops.util.create_key_pair(key_name=key_name)
+        self.public_ipv4 = server_info['main_ip']
+        self.log_end("{}".format(self.public_ipv4))
+        self.default_gateway = server_info['gateway_v4']
+        self.netmask = server_info['netmask_v4']
+        self.wait_for_ssh()
+
+    def switch_to_configuration(self, method, sync, command=None):
+        res = super(VultrState, self).switch_to_configuration(method, sync, command)
+        if res == 0:
+            self._ssh_public_key_deployed = True
+        return res
+
diff --git a/release.nix b/release.nix
index ad521a5..42734e2 100644
--- a/release.nix
+++ b/release.nix
@@ -95,6 +95,7 @@ rec {
           pysqlite
           datadog
           digital-ocean
+          vultr
         ];
 
       # For "nix-build --run-env".
